name: >-
  container-dev_env_bb509659-8cd8-4193-b285-e31895227ed4_app_15cbdf02-a94c-4cae-b7e2-8e77c8429b28
  Pipeline (Skyu Generated)
'on':
  push:
    branches:
      - main
  workflow_dispatch: {}
  repository_dispatch:
    types: pipeline_06bf151d-56b1-4d4a-a3ef-7bdb125b3d56
env:
  ENCODED_PIPELINE_SECRET: >-
    ${{secrets.ASKYUGITOPS2F49CCBA_ENV_BB5096598CD84193B285E31895227ED4_APP_15CBDF02A94C4CAEB7E28E77C8429B28_CONTAINERDEV_ENV_BB5096598CD84193B285E31895227ED4_APP_15CBDF02A94C4CAEB7E28E77C8429B28}}
  IMAGE_TAG: ${{github.event.client_payload.commitId || github.sha}}
  IMAGE_NAME: hhhhhh/hhhhh
  DOCKER_FILE_PATH: .
  DOCKER_BUILD_CONTEXT: .
  SCAN_SEVERITY: CRITICAL
  TRIVY_SCAN_EXIT_CODE: '1'
  TRIVY_RESULT_FORMAT: json
  REPOSITORY_NAME: hhhhh
  DEPLOY_STEP_SHOULD_DEPLOY: 'true'
jobs:
  build:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Start
        run: >-
          echo " Starting GitHub Action!" && echo "IMAGE_EXISTS_IN_ECR=false" >>
          $GITHUB_ENV
      - name: 'Run :: Checkout repository'
        uses: actions/checkout@v2
      - name: 'Run :: Checkout Specific Commit'
        if: ${{ github.event.client_payload.commitId != null }}
        run: git checkout ${{ github.event.client_payload.commitId }}
      - name: 'Run :: Decoding Secrets'
        run: >-
          echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r
          'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo
          "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
      - name: 'Run :: Login to Dockerhub'
        run: >-
          echo "${{ env.DOCKER_PASSWORD }}" | docker login -u "${{
          env.DOCKER_USERNAME }}" --password-stdin docker.io
      - name: 'Run :: Check if image already exists'
        id: check-image-existence-step-id
        run: |2-

              if docker pull ${{ env.IMAGE_NAME }}:${{env.IMAGE_TAG}} >/dev/null 2>&1; 
              then
                echo "Image exists in registry."
                echo "IMAGE_EXISTS_IN_ECR=true" >> $GITHUB_ENV
              else
                echo "Image does not exist in registry."
                echo "IMAGE_EXISTS_IN_ECR=false" >> $GITHUB_ENV
              fi
              
      - name: 'Run :: Build With Docker'
        run: >-
          docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} -f
          ${{env.DOCKER_FILE_PATH}} ${{env.DOCKER_BUILD_CONTEXT}}
        if: ${{ env.IMAGE_EXISTS_IN_ECR == 'false' }}
      - name: 'Run :: Trivy vulnerability scanner'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: ${{env.TRIVY_RESULT_FORMAT}}
          output: ${{ env.IMAGE_TAG }}-trivy-result.json
          exit-code: ${{env.TRIVY_SCAN_EXIT_CODE}}
          ignore-unfixed: true
          vuln-type: os,library
          severity: ${{env.SCAN_SEVERITY}}
          hide-progress: true
        if: ${{ env.IMAGE_EXISTS_IN_ECR == 'false' }}
      - name: 'Run :: Upload Trivy Result To S3'
        run: |2-

              response=$(curl -X POST ${{ env.TRIVY_RESULT_UPLOAD_ENDPOINT }} -H "Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}" -H "x-auth-by: sa" -H "x-organization-id: ${{ env.DEPLOYMENT_ORGANIZATION_ID }}" -H "x-project-id: ${{ env.DEPLOYMENT_PROJECT_ID }}" -H "x-environment-id: ${{ env.DEPLOYMENT_ENVIRONMENT_ID }}" -H "x-resource-id: trivy_${{ env.IMAGE_TAG }}" -H "Content-Type: multipart/form-data" -F "file=@${{ env.IMAGE_TAG }}-trivy-result.json" -F "provider=aws" -F "resourceType=trivy-report" -F "cloudStoragePath=/${{ env.DEPLOYMENT_APPLICATION_ID }}/")

              if echo "$response" | grep -q '"success":true'; then
                echo "SUCCESS :: $response"
              else
                echo "FAILED :: $response"
              fi
              
        if: ${{ env.IMAGE_EXISTS_IN_ECR == 'false' }}
      - name: 'Run :: Build, tag, and push image'
        run: docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        if: ${{ env.IMAGE_EXISTS_IN_ECR == 'false' }}
      - name: 'Run :: Deploy and Notify Resource Service'
        run: |2-

              response=$(curl -d "appType=Deployment&imageRegistryURL=${{ env.IMAGE_NAME }}&appVersionId=${{ env.DEPLOYMENT_APP_VERSION_ID }}&tag=${{ env.IMAGE_TAG }}&containerName=${{ env.DEPLOYMENT_CONTAINER_NAME }}&shouldDeploy=${{env.DEPLOY_STEP_SHOULD_DEPLOY}}&pipelineRunId=${{ github.run_id }}&commitDetails[commitHash]=${{ github.sha }}&commitDetails[commitAvatar]=https://github.com/${{ github.event.head_commit.author.name }}.png&commitDetails[commitTime]=${{ github.event.head_commit.timestamp }}&commitDetails[commitMessage]=\"${{ github.event.head_commit.message }}\"&commitDetails[commitUser]=${{ github.event.head_commit.author.name }}" -X PATCH -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.DEPLOYMENT_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.DEPLOYMENT_PROJECT_ID }}' -H 'x-environment-id: ${{ env.DEPLOYMENT_ENVIRONMENT_ID }}' -H 'x-application-id: ${{ env.DEPLOYMENT_APPLICATION_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded' '${{ env.DEPLOYMENT_ENDPOINT }}')
              status_code=$?

              if [ $status_code -eq 0 ]; then
                if echo "$response" | grep -q '"success":true'; then
                  echo "SUCCESS :: $response"
                else
                  echo "FAILED :: $response"
                  exit 1
                fi
              else
                echo "Failed to deploy. HTTP status code: $status_code"
                exit 1
              fi
            
